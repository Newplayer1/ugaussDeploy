{"version":3,"sources":["views/donnees/donnees.js"],"names":["Donnees","useState","data","setData","svgRef","useRef","useEffect","svg","select","current","xScale","scaleLinear","domain","length","range","yScale","xAxis","axisBottom","ticks","tickFormat","index","style","call","yAxis","axisRight","myLine","line","x","value","y","curve","curveCardinal","selectAll","join","attr","Fragment","textAlign","ref","className","onClick","map","filter"],"mappings":"uJA0FeA,UA/Ef,WAAoB,IAAD,EACOC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KADzC,mBACVC,EADU,KACJC,EADI,OAESF,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAF3C,mBAGXG,GAHW,UAGFC,oBAqCf,OAlCAC,qBAAU,WACR,IAAMC,EAAMC,YAAOJ,EAAOK,SACpBC,EAASC,cACZC,OAAO,CAAC,EAAGV,EAAKW,OAAS,IACzBC,MAAM,CAAC,EAAG,MAEPC,EAASJ,cAAcC,OAAO,CAAC,EAAG,MAAME,MAAM,CAAC,IAAK,IAEpDE,EAAQC,YAAWP,GACtBQ,MAAMhB,EAAKW,QACXM,YAAW,SAACC,GAAD,OAAWA,EAAQ,KACjCb,EAAIC,OAAO,WAAWa,MAAM,YAAa,mBAAmBC,KAAKN,GAEjE,IAAMO,EAAQC,YAAUT,GACxBR,EAAIC,OAAO,WAAWa,MAAM,YAAa,mBAAmBC,KAAKC,GAGjE,IAAME,EAASC,cACZC,GAAE,SAACC,EAAOR,GAAR,OAAkBV,EAAOU,MAC3BS,EAAEd,GACFe,MAAMC,KAITxB,EACGyB,UAAU,SACV9B,KAAK,CAACA,IACN+B,KAAK,QACLC,KAAK,QAAS,QACdA,KAAK,IAAKT,GACVS,KAAK,OAAQ,QACbA,KAAK,SAAU,UACjB,CAAChC,IAGF,kBAAC,IAAMiC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMd,MAAO,CAAEe,UAAW,WACxB,8CACA,yBAAKC,IAAKjC,GACR,uBAAGkC,UAAU,WACb,uBAAGA,UAAU,aAGjB,kBAAC,IAAD,CAAMjB,MAAO,CAAEe,UAAW,WACxB,+CAEF,kBAAC,IAAD,CAAMf,MAAO,CAAEe,UAAW,WACxB,kDAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMf,MAAO,CAAEe,UAAW,WACxB,+CAEF,kBAAC,IAAD,CAAMf,MAAO,CAAEe,UAAW,WACxB,8CAEF,kBAAC,IAAD,CAAMf,MAAO,CAAEe,UAAW,WACxB,+CAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASG,QAAS,kBAAMpC,EAAQD,EAAKsC,KAAI,SAACZ,GAAD,OAAWA,EAAQ,QAA5D,eAGA,4BAAQW,QAAS,kBAAMpC,EAAQD,EAAKuC,QAAO,SAACb,GAAD,OAAWA,EAAQ,SAA9D","file":"static/js/13.c785f05a.chunk.js","sourcesContent":["import { CButton, CCard, CCardBody, CCol, CImg, CRow } from \"@coreui/react\";\r\nimport React, { Component, Fragment, useRef, useEffect, useState } from \"react\";\r\nimport {\r\n  select,\r\n  line,\r\n  curveCardinal,\r\n  axisBottom,\r\n  scaleLinear,\r\n  axisRight,\r\n} from \"d3\";\r\n\r\nfunction Donnees() {\r\n  const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n  const [data2, setData2] = useState([15, 50, 60, 60, 20, 60, 60]);\r\n  const svgRef = useRef();\r\n\r\n  // will be called initially and on every data change\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    const xScale = scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, 300]);\r\n\r\n    const yScale = scaleLinear().domain([0, 150]).range([150, 0]);\r\n\r\n    const xAxis = axisBottom(xScale)\r\n      .ticks(data.length)\r\n      .tickFormat((index) => index + 1);\r\n    svg.select(\".x-axis\").style(\"transform\", \"translateY(0px)\").call(xAxis);\r\n\r\n    const yAxis = axisRight(yScale);\r\n    svg.select(\".y-axis\").style(\"transform\", \"translateX(0px)\").call(yAxis);\r\n\r\n    // generates the \"d\" attribute of a path element\r\n    const myLine = line()\r\n      .x((value, index) => xScale(index))\r\n      .y(yScale)\r\n      .curve(curveCardinal);\r\n\r\n    // renders path element, and attaches\r\n    // the \"d\" attribute from line generator above\r\n    svg\r\n      .selectAll(\".line\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr(\"d\", myLine)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"blue\");\r\n  }, [data]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CRow>\r\n        <CCol style={{ textAlign: \"center\" }}>\r\n          <h1>Tension actuel</h1>\r\n          <svg ref={svgRef}>\r\n            <g className=\"x-axis\" />\r\n            <g className=\"y-axis\" />\r\n          </svg>\r\n        </CCol>\r\n        <CCol style={{ textAlign: \"center\" }}>\r\n          <h1>Courant actuel</h1>\r\n        </CCol>\r\n        <CCol style={{ textAlign: \"center\" }}>\r\n          <h1>Puissance actuel</h1>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol style={{ textAlign: \"center\" }}>\r\n          <h1>Tension actuel</h1>\r\n        </CCol>\r\n        <CCol style={{ textAlign: \"center\" }}>\r\n          <h1>Tension Heure</h1>\r\n        </CCol>\r\n        <CCol style={{ textAlign: \"center\" }}>\r\n          <h1>Courant Heure</h1>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CButton onClick={() => setData(data.map((value) => value + 5))}>\r\n          Update data\r\n        </CButton>\r\n        <button onClick={() => setData(data.filter((value) => value < 35))}>\r\n          Filter data\r\n        </button>\r\n      </CRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Donnees;\r\n"],"sourceRoot":""}