{"version":3,"sources":["views/donnees/Subscriber.js","views/donnees/Receiver.js","views/donnees/mqtt_example.js"],"names":["Subscriber","sub","unSub","showUnsub","Form","useForm","form","SubForm","layout","name","initialValues","topic","qos","onFinish","values","gutter","span","Item","label","offset","style","textAlign","type","htmlType","marginLeft","onClick","getFieldsValue","title","Receiver","payload","useState","messages","setMessages","useEffect","size","bordered","dataSource","renderItem","item","Meta","description","message","mqttOption","port","keepalive","protocolId","protocolVersion","clean","reconnectPeriod","connectTimeout","username","password","will","retain","rejectUnauthorized","clientId","Donnees","client","setClient","isSubed","setIsSub","listSub","setListSub","setPayload","setConnectStatus","mqtt","connect","on","err","console","error","end","toString","log","subscription","subscribe","push","unsubscribe","listSubTempo","i","length","splice","map"],"mappings":"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","file":"static/js/5.d96de0eb.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Card, Form, Input, Row, Col, Button, Select } from \"antd\";\r\n\r\nconst Subscriber = ({ sub, unSub, showUnsub }) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const record = {\r\n    topic: \"test\",\r\n    qos: 0,\r\n  };\r\n\r\n  const onFinish = (values) => {\r\n    sub(values);\r\n  };\r\n\r\n  const handleUnsub = () => {\r\n    const values = form.getFieldsValue();\r\n    unSub(values);\r\n  };\r\n\r\n  const SubForm = (\r\n    <Form\r\n      layout=\"vertical\"\r\n      name=\"basic\"\r\n      form={form}\r\n      initialValues={record}\r\n      onFinish={onFinish}\r\n    >\r\n      <Row gutter={20}>\r\n        <Col span={12}>\r\n          <Form.Item label=\"Topic\" name=\"topic\">\r\n            <Input />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col span={8} offset={16} style={{ textAlign: \"right\" }}>\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Subscribe\r\n            </Button>\r\n            {showUnsub ? (\r\n              <Button\r\n                type=\"danger\"\r\n                style={{ marginLeft: \"10px\" }}\r\n                onClick={handleUnsub}\r\n              >\r\n                Unsubscribe\r\n              </Button>\r\n            ) : null}\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n\r\n  return <Card title=\"Subscriber\">{SubForm}</Card>;\r\n};\r\n\r\nexport default Subscriber;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Card, List } from \"antd\";\r\n\r\nconst Receiver = ({ payload }) => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (payload.topic) {\r\n      setMessages((messages) => [...messages, payload]);\r\n    }\r\n  }, [payload]);\r\n\r\n  const renderListItem = (item) => (\r\n    <List.Item>\r\n      <List.Item.Meta title={item.topic} description={item.message} />\r\n    </List.Item>\r\n  );\r\n\r\n  return (\r\n    <Card title=\"Receiver\">\r\n      <List\r\n        size=\"small\"\r\n        bordered\r\n        dataSource={messages}\r\n        renderItem={renderListItem}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Receiver;\r\n","import { CButton, CCard, CCardBody, CCol, CImg, CRow } from \"@coreui/react\";\r\nimport React, { createContext, useEffect, useState } from \"react\";\r\nimport Subscriber from \"./Subscriber.js\";\r\nimport Receiver from \"./Receiver.js\";\r\nimport mqtt from \"mqtt\";\r\n\r\nconst host = \"wss://driver.cloudmqtt.com\";\r\nconst mqttOption = {\r\n  port: 38909,\r\n  keepalive: 30,\r\n  protocolId: \"MQTT\",\r\n  protocolVersion: 4,\r\n  clean: true,\r\n  reconnectPeriod: 1000,\r\n  connectTimeout: 30 * 1000,\r\n  username: \"dhvvrehu\",\r\n  password: \"10T74SxY2TX2\",\r\n  will: {\r\n    topic: \"WillMsg\",\r\n    payload: \"Connection Closed abnormally..!\",\r\n    qos: 0,\r\n    retain: false,\r\n  },\r\n  rejectUnauthorized: false,\r\n  clientId: \"mqttjs_webClient\",\r\n};\r\n\r\nconst Donnees = () => {\r\n  const [client, setClient] = useState(null);\r\n  const [isSubed, setIsSub] = useState(false);\r\n  const [listSub, setListSub] = useState();\r\n  const [payload, setPayload] = useState({});\r\n  const [connectStatus, setConnectStatus] = useState(\"Connect\");\r\n\r\n  useEffect(() => {\r\n    setConnectStatus(\"Connecting\");\r\n    setClient(mqtt.connect(host, mqttOption));\r\n    setListSub([]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (client) {\r\n      client.on(\"connect\", () => {\r\n        setConnectStatus(\"Connected\");\r\n      });\r\n      client.on(\"error\", (err) => {\r\n        console.error(\"Connection error: \", err);\r\n        client.end();\r\n      });\r\n      client.on(\"reconnect\", () => {\r\n        setConnectStatus(\"Reconnecting\");\r\n      });\r\n      client.on(\"message\", (topic, message) => {\r\n        const payload = { topic, message: message.toString() };\r\n        setPayload(payload);\r\n      });\r\n    }\r\n  }, [client]);\r\n\r\n  /*const mqttPublish = (context) => {\r\n    if (client) {\r\n      const { topic, qos, payload } = context;\r\n      client.publish(topic, payload, { qos }, (error) => {\r\n        if (error) {\r\n          console.log(\"Publish error: \", error);\r\n        }\r\n      });\r\n    }\r\n  };*/\r\n\r\n  const mqttSub = (subscription) => {\r\n    if (client) {\r\n      const { topic } = subscription;\r\n      const qos = 0;\r\n      client.subscribe(topic, { qos }, (error) => {\r\n        if (error) {\r\n          console.log(\"Subscribe to topics error\", error);\r\n          return;\r\n        }\r\n        setIsSub(true);\r\n        listSub.push(topic);\r\n        setListSub(listSub);\r\n      });\r\n    }\r\n  };\r\n\r\n  const mqttUnSub = (subscription) => {\r\n    if (client) {\r\n      const { topic } = subscription;\r\n      client.unsubscribe(topic, (error) => {\r\n        if (error) {\r\n          console.log(\"Unsubscribe error\", error);\r\n          return;\r\n        }\r\n        const listSubTempo = listSub;\r\n        for (var i = 0; i < listSubTempo.length; i++) {\r\n          if (listSubTempo[i] === 5) {\r\n            listSubTempo.splice(i, topic);\r\n          }\r\n        }\r\n        setListSub(listSubTempo);\r\n        setIsSub(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  console.log(listSub);\r\n  return (\r\n    <>\r\n      <Subscriber sub={mqttSub} unSub={mqttUnSub} showUnsub={isSubed} />\r\n      <Receiver payload={payload} />\r\n\r\n      <CCard>\r\n        {listSub\r\n          ? listSub.map((sub) => {\r\n              return <h2>{sub}</h2>;\r\n            })\r\n          : null}\r\n      </CCard>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Donnees;\r\n"],"sourceRoot":""}